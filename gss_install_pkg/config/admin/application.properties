## OAuth-2.0 Authentication configuration

# To enable oauth2 authentication, set auth = true and uncomment all spring.security.oauth2... properties
auth = false

# Replace the 8443 with the keycloak.confidential-port
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://<localhost>:<8443>/<realms>/<realm-name>
#spring.security.oauth2.resourceserver.jwt.jwk-issuer-uri=https://<localhost>:<8443>/<realms>/<realm-name>/protocol/openid-connect/certs

### IMPORTANT ### Please ensure that the 'keycloak.client', 'keycloak.role' and 'cors.origins' are not commented out !
# if auth=true, please provide the 'keycloak Client ID' and 'keycloak Client Role.'
keycloak.client = <client-id>
keycloak.role = <client-role>

## To enable Cross Origin Requests, for example to allow the Admin UI to call this API
cors.origins = http://<localhost>:<8082>

# Which attribute to use to identify the user (displayed in logs)
# Possible values are : user_id, preferred_username. Default value is user_id.
user-name-attribute=<preferred_username>

## Server configuration

# Port exposed by the server. If you use a dockerized launch, expose this port.
server.port = 8082

# Configure context path (optional)
server.servlet.contextPath=/gss-admin-api

# Configure logs

# logging.level.root = INFO
# logging.level.org.springframework.web = DEBUG

############ PRODUCT DELETION
# To perform perform deletion of products, the configuration of stores need to be in database.

# Used to define the properties to perform deletion

# Configuration to have in the first launch
deletion.kafka.hosts=<kafka.host>:<kafka.port>
deletion.kafka.topic=<kafka topic name>
deletion.datastores=datastore-name1;datastore-name2;datastore-name3
deletion.metadatastores=metadatastore-name1;metadatastore-name2

## Example of configuration
# Kafka hosts separated by a semi-colon (;)
#deletion.kafka.hosts=localhost:29092;localhost:39092
# Kafka topic for deletion
#deletion.kafka.topic=deletion
# Datastores name where to delete products separated by a semi-colon (;)
#deletion.datastores=HFS1-local
# Metadatastores name where to delete products separated by a semi-colon (;)
#deletion.metadatastores=solr-local


# The two below parameter are used to not have custom errors pages
server.error.whitelabel.enabled = false
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration

# Configure the management of the HTTP Headers between the web server and the application.
# Possible values:
# - NATIVE = use the web server support for forwaded headers. It allows us to 
# to handle HTTPS queries inside the application and do not modify what the server received.
# - FRAMEWORK : Spring will handle forwarded headers. It is possible that some headers will be 
# updated according to the framework.
server.forward-headers-strategy = NATIVE

# Used to encrypt secured information (Datastore Admin API and Ingester Admin API)
# This password must be strong (8 characters min with upper case, digit and special characters
# like *,#)
secret.key.password=<encryption>

# Database configuration
spring.datasource.url=jdbc:postgresql://<server.url>:<server.port>/<database.name>
spring.datasource.username=<user.name> 
spring.datasource.password=<user.password> 
spring.datasource.driver-class-name = org.postgresql.Driver
# Max pool connexion size
spring.datasource.hikari.maximum-pool-size = 3
#db.socketTimeout=1000
#db.networkTimeout=5000


