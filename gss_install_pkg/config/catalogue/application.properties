## OAuth-2.0 Authentication configuration

# To enable oauth2 authentication, set auth = true and uncomment all spring.security.oauth2... properties
auth = false

# Replace the 8443 with the keycloak.confidential-port
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://<localhost>:<8443>/<realms>/<realm-name>
#spring.security.oauth2.resourceserver.jwt.jwk-issuer-uri=https://<localhost>:<8443>/<realms>/<realm-name>/protocol/openid-connect/certs

spring.security.oauth2.client.registration.keycloak.client-id=<client-id>
spring.security.oauth2.client.registration.keycloak.client-secret=<client-secret>
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,roles
spring.security.oauth2.client.provider.keycloak.issuer-uri=https://<localhost>:<8443>/<realms>/<realm-name>
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

### IMPORTANT ### Please ensure that the 'keycloak.client', 'keycloak.role' and 'cors.origins' are not commented out !
# if auth=true, please provide the 'keycloak Client ID' and 'keycloak Client Role.'
keycloak.client = <client-id>
keycloak.role = <client-role>

## To enable Cross Origin Requests, for example to allow the Admin UI to call this API
cors.origins = http://<localhost>:<8081>


# Which attribute to use to identify the user (displayed in logs and used for quotas)
# Possible values are : user_id, preferred_username. Default value is user_id.
user-name-attribute=preferred_username

## Server configuration

# Port exposed by the server. If you use a dockerized launch, expose this port.
server.port = 8081

# Configure context path
server.servlet.contextPath=/odata/v1

# Configure the management of the HTTP Headers between the web server and the application.
# Possible values:
# - NATIVE = use the web server support for forwaded headers. It allows us to 
# to handle HTTPS queries inside the application and do not modify what the server received.
# - FRAMEWORK : Spring will handle forwarded headers. It is possible that some headers will be 
# updated according to the framework.
server.forward-headers-strategy = NATIVE

# The two below parameter are used to not have custom errors pages
server.error.whitelabel.enabled = false
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration

## MANDATORY
# This part is mandatory even if you use XML configuration
spring.datasource.url=jdbc:postgresql://<server.url>:<server.port>/<database.name> 
spring.datasource.username=<user.name> 
spring.datasource.password=<user.password> 
spring.datasource.driver-class-name=org.postgresql.Driver
# Max pool connexion size
spring.datasource.hikari.maximum-pool-size=3
#db.socketTimeout=1000
#db.networkTimeout=5000

# To encrypt secret information in database (password for example)
secret.key.password=<encryption>

## END OF MANDATORY


## Part needed when using DB configuration

# CDH Configuration

## Datastore's names
cdh.useDbConfiguration=true
cdh.datastores=datastore-name1;datastore-name2
## Metadatastore's names
cdh.metadatastores=metadatastore.name1;metadatsore.name2


deletion.kafka.hosts=<kafka.host>:<kafka.port>
deletion.kafka.topic=<kafka topic name>
deletion.datastores=datastore-name1;datastore-name2;datastore-name3
deletion.metadatastores=metadatastore-name1;metadatastore-name2

## Swift Configuration
swiftConfiguration.segmentSizeMB=100
swiftConfiguration.retries=5
swiftConfiguration.retryDelayMs=50
swiftConfiguration.maxConnections=20

## ENABLE / DISABLE EVICTION BY TIME
# Use to define the URL for catalogue where to perform deletion
process.evictionByTime=false
   
# directDownloadLink : enable the direct download from # cloud stores (swift) when using $value. Default is true. --
# quotaDisabled : disable quotas. Default is false. 
download.directDownloadLink=false 
download.quotaDisabled=false

# End of CDH Configuration
